workspace:
  base: /go
  path: src/github.com/udistrital/${DRONE_REPO##udistrital/}
  when:
      branch: [master, develop]
      event: push

pipeline:

  # install the AngularJS program
  nodeJS-install:
    image: node:10.7.0
    commands:
     - npm install -g grunt-cli bower
     - npm install
     - npm install natives
     - npm install grunt-sonar-runner --save-dev
     - bower install --allow-
    when:
      branch: [master, develop]
      event: push

  # run grunt sonar runner
  grunt-sonar-runner:
    image: openjdk:8-alpine
    commands:
     - export RELEASE=3.3.0.1492
     - apk add --no-cache  curl grep sed unzip nodejs npm
     - curl --insecure -o ./sonarscanner.zip -L https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$RELEASE-linux.zip
     - unzip sonarscanner.zip
     - rm sonarscanner.zip
     - rm -rf sonar-scanner-$RELEASE-linux/jre
     - sed -i 's/use_embedded_jre=true/use_embedded_jre=false/g' ./sonar-scanner-$RELEASE-linux/bin/sonar-scanner
     - export PATH=$PATH:/go/src/github.com/udistrital/${DRONE_REPO##udistrital/}/sonar-scanner-$RELEASE-linux/bin
     #- cp sonar-project.properties ./sonar-scanner-$RELEASE-linux/conf/sonar-scanner.properties
     #- sonar-scanner
     - grunt sonarRunner:analysis
    when:
      branch: [master, develop]

  # build the AngularJS program
  nodeJS-build:
    image: node:10.7.0
    commands:
     - grunt build
    when:
      branch: [master, develop]
      event: push

  # upload app.zip to s3 bucket for CodePipline
  # publish_s3:
  #   image: plugins/s3
  #   secrets: [ aws_access_key_id, aws_secret_access_key ]
  #   region: "us-east-1"
  #   bucket: "pruebastitan.portaloas.udistrital.edu.co"
  #   source: dist/**/*
  #   target: /
  #   strip_prefix: dist/
  #   when:
  #     branch: [develop]
  #     event: push

  # publish_s3:
  #   image: plugins/s3
  #   secrets: [ aws_access_key_id, aws_secret_access_key ]
  #   region: "us-east-1"
  #   bucket: "titan.portaloas.udistrital.edu.co"
  #   source: dist/**/*
  #   target: /
  #   strip_prefix: dist/
  #   when:
  #     branch: [master]
  #     event: push

  # #Notify results to telegram
  # notify_telegram:
  #   image: appleboy/drone-telegram
  #   secrets: [ telegram_token, telegram_to ]
  #   format: html
  #   message: >
  #     {{#success build.status}}
  #       <code>{{repo.owner}}/{{repo.name}}</code> <a href="{{build.link}}">SUCCESS</a>
  #       <code>{{commit.branch}}</code>@<a href="{{commit.link}}">{{truncate commit.sha 7}}</a>
  #     {{else}}
  #       <code>{{repo.owner}}/{{repo.name}}</code> <a href="{{build.link}}">FAILURE</a>
  #       <code>{{commit.branch}}</code>@<a href="{{commit.link}}">{{truncate commit.sha 7}}</a>
  #     {{/success}}
  #   when:
  #     status: [success, failure]
  #     branch: [master, develop]
  #     event: push
